import Tkinter as Tk

# Encryption/Decryption Functions

def caesar(caesar_out, shift, e_or_d):
    temp = ""
    if e_or_d == "encrypt":
        for c in caesar_out:
            if not c.isalpha():
                temp += chr(ord(c))
            else:
                if c.islower():
                    temp += chr((((ord(c) - 97) + shift) % 26) + 97)
                else:
                    temp += chr((((ord(c) - 65) + shift) % 26) + 65)
        return temp
    elif e_or_d == "decrypt":
        for c in caesar_out:
            if not c.isalpha():
                temp += chr(ord(c))
            else:
                if c.islower():
                    temp += chr((((ord(c) - 97) - shift) % 26) + 97)
                else:
                    temp += chr((((ord(c) - 65) - shift) % 26) + 65)
        return temp


def vigenere(vigenere_out, key, e_or_d):
    i = 0
    k = 0
    if e_or_d == "encrypt":
        for c in key:
            if not c.isalpha():
                return "Use only single characters and words for the Vigenere key."
        temp = ""
        while len(vigenere_out) > len(key):
            key += key
        while i < len(vigenere_out):
            if not vigenere_out[i].isalpha():
                temp += vigenere_out[i]
                i += 1
            else:
                if vigenere_out[i].islower():
                    shift = ord(key[k].lower()) - 97
                    output = chr(((ord(vigenere_out[i]) - 97 + shift) % 26) + 97)
                    temp += output
                    i += 1
                    k += 1
                elif vigenere_out[i].isupper():
                    shift = ord(key[k].upper()) - 65
                    output = chr(((ord(vigenere_out[i]) - 65 + shift) % 26) + 65)
                    temp += output
                    i += 1
                    k += 1
        return temp
    else:
        for c in key:
            if not c.isalpha():
                return "Use only single characters and words for the Vigenere key."
        temp = ""
        while len(vigenere_out) > len(key):
            key += key
        while i < len(vigenere_out):
            if not vigenere_out[i].isalpha():
                temp += vigenere_out[i]
                i += 1
            else:
                if vigenere_out[i].islower():
                    shift = ord(key[k].lower()) - 97
                    output = chr(((ord(vigenere_out[i]) - 97 - shift) % 26) + 97)
                    temp += output
                    i += 1
                    k += 1
                elif vigenere_out[i].isupper():
                    shift = ord(key[k].upper()) - 65
                    output = chr(((ord(vigenere_out[i]) - 65 - shift) % 26) + 65)
                    temp += output
                    i += 1
                    k += 1
        return temp

# Button functions

def get_caesar():
    win = Tk.Toplevel(window)
    output_box = Tk.Text(win, height=300, width=300)
    output_box.grid(row=0, column=0)
    shift = encrypt_var.get()
    output_box.insert(Tk.END, caesar(Caesar_encrypt.get("1.0", 'end-1c'), shift, "encrypt"))
    output_box.configure(state=Tk.DISABLED)


def dget_caesar():
    win = Tk.Toplevel(window)
    output_box = Tk.Text(win, height=300, width=300)
    output_box.grid(row=0, column=0)
    shift = decrypt_var.get()
    output_box.insert(Tk.END, caesar(Caesar_decrypt.get("1.0", 'end-1c'), shift, "decrypt"))
    output_box.configure(state=Tk.DISABLED)


def get_vigenere():
    win = Tk.Toplevel(window)
    output_box = Tk.Text(win, height=300, width=300)
    output_box.grid(row=0, column=0)
    output_box.insert(Tk.END, vigenere(vigenere_encrypt.get("1.0", 'end-1c'), keyfield.get("1.0", 'end-1c'), "encrypt"))
    output_box.configure(state=Tk.DISABLED)


def dget_vigenere():
    win = Tk.Toplevel(window)
    output_box = Tk.Text(win, height=300, width=300)
    output_box.grid(row=0, column=0)
    output_box.insert(Tk.END, vigenere(vigenere_decrypt.get("1.0", 'end-1c'), dsubmit_keyfield.get("1.0", 'end-1c'), "decrypt"))
    output_box.configure(state=Tk.DISABLED)

# GUI
window = Tk.Tk()
window.title("Cipher Encrypt/Decrypt")
window.geometry("1200x600")

# Caesar layout

Caesar_encrypt = Tk.Text(window, height=20, width=40)
Caesar_encrypt.grid(row=0, column=0)

encrypt_var = Tk.IntVar(window)
encrypt_var.set(1)

Caesar_key = Tk.OptionMenu(window, encrypt_var, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                           14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
Caesar_key.grid(row=0, column=1)

Caesar_submit = Tk.Button(window, text="Caesar Submit", command=get_caesar)
Caesar_submit.grid(row=0, column=2)

Caesar_decrypt = Tk.Text(window, height=20, width=40)
Caesar_decrypt.grid(padx=5, row=0, column=3)

decrypt_var = Tk.IntVar(window)
decrypt_var.set(1)

Caesar_dkey = Tk.OptionMenu(window, decrypt_var, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
Caesar_dkey.grid(row=0, column=4)

Caesar_dsubmit = Tk.Button(window, text="Caesar Decrypt Submit", command=dget_caesar)
Caesar_dsubmit.grid(row=0, column=5)

# Vigenere layout

vigenere_encrypt = Tk.Text(window, height=20, width=40)
vigenere_encrypt.grid(row=2, column=0)

keyfield = Tk.Text(window, height=5, width=10)
keyfield.grid(padx=10, row=2, column=1)

vigenere_decrypt = Tk.Text(window, height=20, width=40)
vigenere_decrypt.grid(row=2, column=3)

vigenere_submit = Tk.Button(window, text="Vigenere Submit", command=get_vigenere)
vigenere_submit.grid(row=2, column=2)

dsubmit_keyfield = Tk.Text(window, height=5, width=10)
dsubmit_keyfield.grid(padx=10, row=2, column=4)

vigenere_dsubmit = Tk.Button(window, text="Vigenere Decrypt Submit", command=dget_vigenere)
vigenere_dsubmit.grid(row=2, column=5)

window.mainloop()
